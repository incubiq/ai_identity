
========================================================================================
  M3 - Assign DID and VCs to AI
========================================================================================

[ORIGINAL SPEC] OUTPUTS
Open source GitHub repo containing all code and APIs to:
 - Represent an AI on-chain (likely as a NFT, but could change based on Milestone 1 research)
 - Execute an AI's service (where the AI takes input, processes, and gives output)
 - Process the cost of the transaction and attributes earnings to the AI 

[ORIGINAL SPEC] ACCEPTANCE CRITERIA
 - An AI's service can be called
 - The cost of the service is billed to the caller and produces income for the AI
 - Additional milestone 1 outcomes are satisfied

M3 - NEW PLAN AFTER M1 DESIGN review
    * the onchain representation of the AI is now its Identus identity wallet + VCs (not an NFT)
    * identity open source to verify VCs 
    * OSAIS to make use of the identity open source APIs to execute an AI's transaction and generate VCs
    * OSAIS to verify payment claims and make end of month settlements between all parties  


========================================================================================
  Tasks done during this milestone [Aug/Sept 2024]
========================================================================================

 - produced video report

 - changes within the Identity Agent:
   * improved Identity node API to deal with most cases (end to end)
   * added APIs to simplify calls in case of full custodial solution
   * delivered a full POSTMAN test library covering all cases (added to the github)
 
 - changes within OSAIS:
   * implemented a Daemon agent for linking AIs to OSAIS and keep AI independant of users
   * implemented AI libraris for connecting to Daemon and to OSAIS in the context of an authenticated agent
   * implemented assigning a Creds and Proof to any entity in the system
   * backend full integration with the Identity Node
   * UI can show all kinds of Certificates (identity, execution) for all kinds of entities (user, AI, Daemon) 

========================================================================================
  Identus Design inconsistencies
========================================================================================

 [critical]
  - calling APIs successively (like in a Custodial mode, to create a VC or create a Proof) always fails. I have to slow doen the app (around 4sec per call, and even more for the Proof) to get it working. Since VCs and Proofs are not onchain but in a Identus DB, there seems to be no good reason for this dreadful performance. In addition, the doc does not mention this, and if indeed the expectation after a call is that the object "Does not yet exists", then why does the API return the object?
  - no ability to apply a filter on API calls with query of multiple content. (e.g. GET issue-credentials/records) - this is an automatically paginated (100) call which makes its use not optimal.
    => need a filter by date ; by status/protocolStatus ; 

 [important]

  - POST /issue-credentials/credential-offers
    * validityPeriod is the validity for the future Creds, whereas here, we "only" create a an offer for later creating a Creds. 
    * there is NO validityPeriod for the offer, meaning the offer is valid seemingly for ever. 
    * validityPeriod  should more likely have been the validity period of the offer (not of the future Creds)
    * the exp (expire) date inside the Proof creds is always the same (does not reflect the param validityPeriod)

  - General: hyper complication of API / inconsistency:  
    - (Creds Issuance) goalCode and goal do not seem to be included later in the Creds, and cannot either be retrived in the proof. Why is it here?
    - the offer has a "protocolState", whereas a Proof has a "state" ; both supposed to have same meaning, why two different concepts?
    - (Proof Issuance) whereas Creds offers have "createdAt" field, presentation proof do not have any (why, it would have been great)
    - (Proof) a Creds has a validityPeriod, but the Proof does not have any. It makes a proof still valid despite the Creds inside flagged as expired
    
  

