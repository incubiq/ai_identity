
============================================
 Decentralised workflow
============================================

 - to operate in a decentralised and trusted way, this is what we want / need:
   * the AI will NOT belong to anyone. We move from the (initial) concept of AI owner (involving smart contract, NFT, and ability to rent/sell/buy) to a concept of AI service providers, where the service providers compete to offer the best quality/cost service to the AI. 
   * since the AI is not "owned", anyone can use it, by calling it on its API at its location. 
   * We want to avoid forcing a payment for each AI call, as it could become burdensome and too costly in tx fees. For this reason, we will work with pre-payment only, and monthly settlements.
   * Someone (Human or AI - the Caller) can pay for the services of a particular AI
   * The AI which can perfom the service (the AI Worker) has a wallet which can be topped up for its work
   * The worker needs the guarantee of being paid before executing a job, whereas the Caller needs a guarantee that against payment, the job will be executed
   * To receive an AI output, the caller can use the Worker AI by calling its API, and the worker AI will have to deliver, so long as the caller still has enough credits for at least one predictable transaction
   * we avoid using a smart contract to call a worker AI, mostly for cost / transaction fee reasons, and we prefer to call the AI directly on its API (or via OSAIS). 
     => OSAIS will be in charge of issuing VCs and keeping track of the stages of execution of the requested transaction.
     => in some ways, OSAIS acts as the guardian of truth and trust in the system
     => in a later iteration of the project, the equivalent OSAIS management of worker AIs and callers could be encapsulated in a smart contract, but this will be out of scope for this PoC

 - suggested implementation
   * we will put a wrapper API around Identus APIs, to be future proof, in case they change things or add fees on transactions, we want to isolate our code as much as possible from their current implementation.
   * there will be 4 types of roles within the ecosystem: 
      (i) admin: OSAIS is the admin ; 
      (ii) caller: all registered users have a caller role ; 
      (iii) worker: any AI registered within OSAIS will have a worker role ; 
      (iv) service provider : any entity who has been assigned a DID within OSAIS can also act as service provider when properly registered for this. 
   * All those interacting in the ecosystem (admin / caller / worker) must have a DID. This is how they are identified.
   * Since maintaining DID private keys can be burdensome, in the first instance (this current project), OSAIS will keep those keys and issue the DIDs to all registered users, and all AIs.  
   * Along with the DID, OSAIS maintains a custodial wallet for each caller / worker.
   * A caller or a worker registering as a service provider will get access to another custodial wallet (the service provider wallet)
   * A user/caller can top-up his OSAIS "caller" wallet account (the wallet linked with the user's DID) with ADA (pay to the public address)
   * A user/caller can top-up his OSAIS "caller" wallet account with Fiat (USD/EUR/GBP) by paying OSAIS (via Stripe) and OSAIS uses it own ADA balance to top-up the user's account by the same converted ADA amount as was paid in Fiat
   * A user/caller cannot get money back from its caller account (it is not a savings account, it is a pre-paid account for calling AI services)
   * A worker AI cannot get money back from its worker account, as the balance is mostly used for paying various fees
   * service providers can extract money from their service provider account
   * the tracking of AI service utilisation is made via Verifiable Credentials (VCs) proving who did what and who owes what to who. 
   * we opt for an ecosystem of semi-autonomous AIs (as opposed to fully autonomous), where the execution of an AI service happens within the OSAIS ecosystem
   * OSAIS acts as a Trust Framework which ensures that all actors in the system are legitimate 

A/ caller tops-up worker AI wallet 
  Caller tops-up his funds
   case A-a: caller prepays in Fiat (USD, EUR, GBP) via stripe
     - User pays via stripe
     - OSAIS receives fiat money
     - Since OSAIS will keep the fiat money, it will use its own funds (its own ADA funded wallet) to credit the caller's wallet with the prepaid amount converted into ADA
   case A-b: user pays into his DID-wallet with ADA
  => in both cases, the non-custodial wallet of the user is topped-up with ADA

B/ Caller calls OSAIS for using a Worker AI
 - caller calls OSAIS API xyz-1 to signify its intention to use a particular AI (filter with some JSON spec, possibly including the full transaction to process). 
   * OSAIS returns the list of all available AIs matching the caller's spec requirements. In this list, each AI must give their expected live availability and price for executing the requirement.
 
 - within the list of AIs, the caller selects one by auto criteria selection (first in the list, most recently used, cheapest, running in a specific country, etc...), and calls again OSAIS on API xyz-2 to request execution of a transaction. 
   * NOTE : this second call could be auto-prepared (choose first AI in list via criteria abc, after a successful return of first call), to avoid delay / asking caller-user too many questions
   * OSAIS creates a uid for the future transaction to be executed by the AI worker
   * OSAIS issues a "worker payment claim" VC to the worker AI, which the worker-AI auto-signs if it is available. VC contains the transaction uid, which the worker can use as a proof for claiming payment against OSAIS
   * OSAIS issues a "caller payment claim" VC to the caller, which the caller auto-signs since he is the one requesting the transaction. VC contains the transaction uid, which OSAIS can use as a proof for claiming payment against the caller
      
C/ Worker processes the call
 - AI does its job and notifies each stage of its process execution (this is already in place within OSAIS) 
 - OSAIS marks the status of the transaction (executed or failed) : 
   * When the worker AI executes successfully the transaction, it sends the result to OSAIS, which automatically sends it to the caller.
   * OSAIS flags the transaction status as "correctly executed"
   * The price of the transaction is set to the one pre-agreed one (by the worker-AI in the pre-call) ; OSAIS adds this cost to the transaction, but marks it "settled: false"
   * If the worker-AI could not process correctly and ended up in error, OSAIS marks the transaction (with uid=...) status as "in error" ; no payment can be claimed against it
 - OSAIS issues a new "proof of activity" VC to the AI worker (it could be a executed or a failed status in the VC)

D/ Service providers
 - A service provider is an entity that can proivide a service in exchange of a cost. 
 - list of possible services that can be provided:
   * access to GPU power (cost per ms)
   * access to a trained model for a specific type of AI (cost per use)
   * access to a worker AI (full access, send input, receive output)
 - to be visible / accessible to others, a service provider must maintain a "service provider capability VC" which establishes its capability and cost ; this VC will have a 3 months duration to allow for update of cost / capabilities but at same time maintain a fixed knwn price for a long enough period
 - OSAIS can deliver this "service provider capability VC"

E/ Worker AI setup, and autonomy of an AI
 - when a worker AI is created within OSAIS, it must define every single service providers that it may use. For example:
   * define at least one infra owner (the one providing the GPU) ; The GPU owner will provide a cost (in USD) per second of execution (for example $0.00012 per sec), defined in its "capability VC"
   * (optional) define its model owner (the one providing the trained model) ; the model owner will provide a royalty cost per transaction execution (also in USD, for example $0.000000001) ; if no model owner is provided, the royalty defaults to $0 
   * (optional) define worker AIs that this AI can use for its needs  
   * each service provider is identified by its DID, has a "capability VC", and has its own "service provider" wallet for payment of the service provided
   * the settlement of payments is managed by OSAIS (see later)
   * each service provider requested by the worker-AI must have a valid "capability VC" (issued by OSAIS) to guarantee to the AI the condition of service (expected delay, cost per sec, etc...) 
   * if a capability VC is out of date, the worker-AI simply cannot use this provider, and if thye provider is a critical one, then the AI cannot work and provide its services
   * those capability VCs will enable OSAIS to attribute cost between all parties, such as AI, owner of infra, owner of model...
   * when an AI calculates a transaction cost estimate, it does so by adding the GPU cost, model cost, or any other claimed costs against it by any supplier of services to the AI. It is then allowed to add up to 1% of extra cost (its profit) for paying future tx fees if/when required.
   * NOTE 1: The worker-AI does NOT belong any owner, but uses other people's services to "exist" ; no infra, or no model => no existence. 
   * NOTE 2: for example, someone could lend their GPU and offer this service to ALL registered AIs     
 - we want the AI to be as autonomous as possible. 
   * In the long run, we can imagine that an AI could subcontract to several infra GPU owners, and make use of several models, or use other services too (another AI worker as a slave AI, for example)
   * the AI has its own wallet and reward its "suppliers" at each execution
   * to incentivise "good worker-AIs", OSAIS will force an AI that returned a transaction in failure, to pay a fee (for example its expectd profit from the tx)

F/ settlement (end of month)
  At end of each month, OSAIS settles all accounts (callers, workers, service providers) with claims over (for example) 2 ADA.
    * for each worker, OSAIS gets the list of valid claims, and checks if payment was made or not (uid of transaction knows), then
     - for each successful transaction not yet settled:
       * OSAIS debits the caller of the transaction amount
       * OSAIS credits the AI worker of the transaction amount, less the claims of service providers
       * OSAIS credits all service providers of their respective due amounts
       * OSAIS marks the transaction as settled
     - for each failed transaction not yet settled:
       * OSAIS debits the AI worker of its pre-agreed profit
       * OSAIS marks the transaction as settled


 => This solution with VCs allows for multiple users of an AI (all renting services at same time, and all paying fees/royalties to owners of infra/models)
 => It does not need smart contract, just topping up an AI wallet to use it


============================================
 IMPACT ON CURRENT OSAIS DESIGN
============================================

 - at the moment, a user in OSAIS can "create an AI" (identified by a unique uid) and host it on a machine of his choice. This user is also free to shutdown this machine and upload the same AI on another infrastructure. And do this many times.
 - there is a strong coupling between the User, the AI, and the GPU infra. 
 - we would prefer a system where it is more decoupled, where the AI is "defined" by its general capabilities (eg: a TXT2IMG / IMG2IMG AI, based on Stable Diffusion 1.5.x), but where other "services" it may require are independant
 - this AI would have an API with input requirements. This API will reside at a specific location, initially whithin OSAIS, such as <osais>/ai/<uid> 
 - this AI would then be able to deploy is "engine" (a docker) into any "infra endpoint" which agreed to act as service provider for the AI (proof of it via a VC) 
 - this AI  would also be able to specify the trained model to use, but pointing at a specific location where it is uploaded (also provided by a service provider, with proof via VC)  

 => with this new design, a caller can request a service from an AI, and get offered several conditions of models, GPU (speed, cost), etc... 


============================================
 IMPACT ON CURRENT MILESTONES
============================================

 - M1 : now finalised

 - M2 initial plan:
    * assign DID to a virtualised AI (the AI is running in docker and accessible via openseourceais.com) 
    * create a Verified Credential for this AI
    * get general information and stats from this AI, in the form of a JSON format

 - M2 new plan:
    * wrap Identus APIs for our needs in a separate open source "identity" nodeJS app (will likely host it on identity.opensourceais.com)
    * make OSAIS as admin + issuer & verifier of VCs of this identity platform
    * identity open source APIs to issue wallets (to AI, to Caller, to service provider)
    * identity open source APIs to issue DID (to AI, to Caller, to service provider)
    * identity open source APIs to issue VC (to AI, Caller, service provider)
    => we will implement more than initially planned: (i) not just identity/VC for AI, but for its callers and its service providers ; (ii) splitting AI into service provider components

 - M3 initial plan:
    * Represent an AI on-chain (likely as a NFT, but could change based on Milestone 1 research)
    * Execute an AI's service (where the AI takes input, processes, and gives output)
    * Process the cost of the transaction and attributes earnings to the AI 
    
 - M3 new plan:
    * the onchain representation of the AI is now its Identus identity wallet + VCs (not an NFT)
    * identity open source to verify VCs 
    * OSAIS to decompose an AI's attribute to resurface service providers (of GPU, of models, etc...) [this part is not open source, as part of OSAIS internals]
    * OSAIS to display in UI the status of an AI from its VCs (identity, performance, cost) [I will likely make all open source until getting a JSON, then the UI may be private, to be reviewed]
    * OSAIS to make use of the identity open source APIs to execute an AI's transaction and generate VCs
    * OSAIS to verify payment claims and make end of month settlements between all parties  
    => we will implement differently from initially planned: (i) no smart contract for running each transaction, but a private orchestrator for cost settlements at end of each month ; (ii) no need for an NFT

 - M4 initial plan:
    * Attribute an identity to an AI
    * Establish Verified Credentials to the AI at certain key points (at creation, then either at each call, or every pack of x calls)
    * Run the AI's service via a smart contract call
    * Deal with monetary transaction between the caller of the service and the AI providing the service.
    * [acceptance] An AI can be called from a smart contract, and can execute a task it has been programmed to do.
 - M4 new plan:
    * Attribute an identity to an AI
    * Establish Verifable Credentials to the AI at certain key points (at creation, at each transaction call)
    * Run the AI's service via a direct call to the AI's URL
    * Deal with monetary transaction between the caller of the service and the AI providing the service.
    * [acceptance] An AI can be called from its URL and can execute a task it has been programmed to do.
 

============================================
 Trust registry
============================================

 A trust registry will be made available at https://opensourceais.com/assets/registry ; it will contain Schemas, list of accepted issuers, and a list of accepted verifiers (OSAIS itself to start with)

 - Schemas:

  * AI worker identity VC 

{
  "name": "ai_identity",
  "version": "1.0.0",
  "description": "An AI's identity attributes",
  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
  "author": "did:prism:TODO",
  "tags": [
    "AI",
    "location",
    "gpu"
  ],
  "schema": {
    "$id": "https://opensourceAIs.com/schemas/ai_identity",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "description": "Identity of an AI",
    "type": "object",
    "properties": {
      "uid": {
        "type": "string",       // OSAIS internal uid
      },
      "name": {
        "type": "string",       // a name for this AI
      },
      "location": {
        "type": "string"        // where this AI can be called
      },
      "repo": {
        "type": "string",       // indicative github repo used to build this AI
      },
      "aSPmodel": {
        "type": "array"         // array of model service providers ({did: ..., location: ...})
      },
      "aSPgpu": {
        "type": "string"        // array of GPU service providers ({did: ..., location: ...})
      },
    },
    "required": [
      "uid",
      "name",
      "location",
      "repo",
      "aSPmodel",
      "aSPgpu"
    ],
    "additionalProperties": true
  }
}

  * AI worker proof activity VC
  {...
    "required": [
        "created_at",
        "lastExecuted_at",
        "aLastCostMs",        // the cost in ms of the last 100 transactions
        "aLastCostUSD",       // the cost in USD of the last 100 transactions
        "aLastCostADA",       // the cost in ADA of the last 100 transactions
        "cFailed",            // the number of failed execution within the last 100 transactions
      ]
  }

  * AI worker payment claim VC (OSAIS settles all claims at end of month)
  {...
    "required": [
        "claimADA",           // the total in ADA of all unsettled claims for this AI against OSAIS (to settle by end of month inot the AI wallet)
        "feesADA",            // the total in ADA of all penalties and fees that OSAIS will deduct from claims for this AI (settle by end of month)
      ]
  }

  * service provider payment claim VC
  {...
    "required": [
        "claimADA",           // the total in ADA of all unsettled claims for this service provider against OSAIS (to settle by end of month into the service provider wallet)
        "feesADA",            // the total in ADA of all penalties and fees that OSAIS will deduct from claims for this service provider (settle by end of month)
      ]
  }

  * OSAIS claimable VC against callers
  {...
    "required": [
        "claimADA",           // the total in ADA of all unsettled claims for the benefit of OSAIS against a caller (to settle by end of month and take from caller wallet)
      ]
  }

  * service provider capability VC (variable content depending on capability provided)
  {...
    "required": [
        "created_at",
        "lastExecuted_at",
        "aLastCostMs",        // the cost in ms of the last 100 transactions (only is relevant)
        "aLastCostUSD",       // the cost in USD of the last 100 transactions
        "aLastCostADA",       // the cost in ADA of the last 100 transactions        
        "cFailed",            // the number of failed execution within the last 100 transactions
        "capability"          // to be defined in details
      ]
  }
 
 - Issuers:

  * at the moment, we will only accept OSAIS as approved issuer

 - Verifiers:

  * at the moment, we will only accept OSAIS as approved verifier


============================================
 Future evolution
============================================

 - it could be that in the future OSAIS becomes a DAPP, and keeps the capability of issuing VCs to all entities in its eco-system
 - the verification of VCs currently within OSAIS could be pushed to a third party decentralised app whose only role is to verify proofs
 - the current design allows a transition to this fully decentralised system where AIs could become fully autonomous.

