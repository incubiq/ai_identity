{
  "swagger": "2.0",
  "info": {
    "description": "An API to issue, manage, and verify digital credentials",
    "version": "v1",
    "title": "Credentials API",
    "termsOfService": "https://trinsic.id/terms/",
    "contact": {
      "name": "Trinsic Engineering Team",
      "url": "https://trinsic.id/contact-us",
      "email": "support@trinsic.id"
    }
  },
  "host": "api.trinsic.id",
  "basePath": "/credentials/v1",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "oauth2": []
    }
  ],
  "paths": {
    "/common/upload": {
      "post": {
        "tags": [
          "Common"
        ],
        "summary": "[Deprecated] Upload image",
        "description": "Please use the Provider API instead.\r\nUpload an image and return a URL with the static remote location.",
        "operationId": "UploadImage",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uploadedFiles",
            "in": "formData",
            "required": true,
            "type": "file"
          },
          {
            "name": "filename",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "contentType",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "/common/networks": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "[Deprecated] List all ledger networks",
        "description": "Please use the Provider API instead.\r\nList all available ledger networks.\r\nSome networks are not available based on your subscription.",
        "operationId": "ListNetworks",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkContract"
              }
            }
          }
        }
      }
    },
    "/common/networks/{networkId}/txnAuthorAgreement": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "[Deprecated] Get network transaction author agreement",
        "description": "This endpoint is no longer needed.\r\nGet the latest transaction author agreement and acceptance methods if one is set on the specified network.",
        "operationId": "GetTransactionAuthorAgreement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkId",
            "in": "path",
            "description": "The network identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NetworkTxnAgreementContract"
            }
          }
        }
      }
    },
    "/common/networks/{tenantId}/txnAuthorAgreement": {
      "put": {
        "tags": [
          "Common"
        ],
        "summary": "[Deprecated] Accept network transaction author agreement",
        "description": "This endpoint is no longer needed.\r\nAccept the latest transaction author agreement on the specified network.",
        "operationId": "AcceptTransactionAuthorAgreement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/connections": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "List all connections",
        "description": "Retrieve a list of all connections.\r\nOptionally, list only connections in a specified state.",
        "operationId": "ListConnections",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "The connection state",
            "required": false,
            "type": "string",
            "enum": [
              "Invited",
              "Negotiating",
              "Connected"
            ]
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Connections"
        ],
        "summary": "Create connection",
        "description": "Initiate a new connection by creating an invitation.\r\nThe newly created connection record will be in state 'Invited' until the other party has accepted the invitation. \r\nThe response body includes details about the newly creation connection.",
        "operationId": "CreateConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Connection invitation parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectionInvitationParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConnectionContract"
            }
          }
        }
      }
    },
    "/connections/{connectionId}": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Get connection",
        "description": "Get the specified connection.",
        "operationId": "GetConnection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "The connection identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConnectionContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Connections"
        ],
        "summary": "Delete connection",
        "description": "Delete the specified connection.",
        "operationId": "DeleteConnection",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "The connection identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "List all credentials",
        "description": "List all credentials that match any specified query parameters.\r\nNo query parameters are required, but any provided will filter the results.",
        "operationId": "ListCredentials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "query",
            "description": "A connection identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "The state of credentials",
            "required": false,
            "type": "string",
            "enum": [
              "Offered",
              "Requested",
              "Issued",
              "Rejected",
              "Revoked"
            ]
          },
          {
            "name": "definitionId",
            "in": "query",
            "description": "A credential definition identifier",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CredentialContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Create and offer credential",
        "description": "Send a credential offer of the specified credential definition to the specified connection.",
        "operationId": "CreateCredential",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The definition and connection to which this offer will be sent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialOfferParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CredentialContract"
            }
          }
        }
      }
    },
    "/credentials/{credentialId}": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "Get credential",
        "description": "Get the specified credential.",
        "operationId": "GetCredential",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "credentialId",
            "in": "path",
            "description": "The credential identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CredentialContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Credentials"
        ],
        "summary": "Issue credential",
        "description": "Issue the specified credential.\r\nIf the values offered were incorrect, changes to the values may be made here.\r\nYou must update all of the values, and they must be follow the same structure of the schema.\r\nTo keep the values the same as those included in the credential offer, leave the body blank.",
        "operationId": "IssueCredential",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "name": "credentialId",
            "in": "path",
            "description": "The credential identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated credential values",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Credentials"
        ],
        "summary": "Revoke an issued credential",
        "description": "Revoke credential that was issued previously.\r\nProcess of revocation will update the revocation registry locally and on the ledger.\r\nIssued credentials can still participate in proof workflows and be considered valid, but only if the verifying ignores the revocation trail.",
        "operationId": "RevokeCredential",
        "parameters": [
          {
            "name": "credentialId",
            "in": "path",
            "description": "The credential identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/credentials/delete/{credentialId}": {
      "delete": {
        "tags": [
          "Credentials"
        ],
        "summary": "Delete credential",
        "description": "Delete the specified credential.\r\nThis endpoint does not revoke the credential.",
        "operationId": "DeleteCredential",
        "parameters": [
          {
            "name": "credentialId",
            "in": "path",
            "description": "The credential identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/verificationPolicies": {
      "get": {
        "tags": [
          "Verification Policies"
        ],
        "summary": "List all verification policies",
        "description": "List all verification policies for the authenticated organization.",
        "operationId": "ListVerificationPolicies",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VerificationPolicyContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Verification Policies"
        ],
        "summary": "Create verification policy",
        "description": "Create a verification policy from the specified parameters.",
        "operationId": "CreateVerificationPolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The verification policy parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationPolicyParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationPolicyContract"
            }
          }
        }
      }
    },
    "/verificationPolicies/{policyId}": {
      "get": {
        "tags": [
          "Verification Policies"
        ],
        "summary": "Get verification policy",
        "description": "Get the specified verification policy.",
        "operationId": "GetVerificationPolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "description": "The verification policy identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationPolicyContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Verification Policies"
        ],
        "summary": "Delete verification policy",
        "description": "Delete the specified verification policy.",
        "operationId": "DeleteVerificationPolicy",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "description": "The verification policy identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/definitions/credentials": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "summary": "List all credential definitions",
        "description": "List all credential definitions for the authorization context.",
        "operationId": "ListCredentialDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CredentialDefinitionContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Definitions"
        ],
        "summary": "Create credential definition and schema from parameters",
        "description": "A credential definition is created and saved on your cloud agent.",
        "operationId": "CreateCredentialDefinition",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Definition parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialDefinitionFromSchemaParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CredentialDefinitionContract"
            }
          }
        }
      }
    },
    "/definitions/credentials/{definitionId}": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "summary": "Get credential definition",
        "description": "Get the specified credential definition.",
        "operationId": "GetCredentialDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "definitionId",
            "in": "path",
            "description": "The credential definition identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CredentialDefinitionContract"
            }
          }
        }
      }
    },
    "/definitions/credentials/{schemaId}": {
      "post": {
        "tags": [
          "Definitions"
        ],
        "summary": "Create credential definition from schema",
        "description": "Create a credential definition from the specified schema.",
        "operationId": "CreateCredentialDefinitionForSchemaId",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The schema identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The definition parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialDefinitionParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CredentialDefinitionContract"
            }
          }
        }
      }
    },
    "/definitions/credentials/{credentialDefinitionId}": {
      "delete": {
        "tags": [
          "Definitions"
        ],
        "summary": "Delete credential definition",
        "description": "Delete the specified credential definition.",
        "operationId": "DeleteCredentialDefinition",
        "parameters": [
          {
            "name": "credentialDefinitionId",
            "in": "path",
            "description": "The credential definition identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/definitions/schemas": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "summary": "List all schemas",
        "description": "List all schemas registered to or used by the authenticated organization.",
        "operationId": "ListSchemas",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchemaRecord"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Definitions"
        ],
        "summary": "Create schema",
        "description": "Register schema with the current agency tenant and write the schema to the ledger using the tenant as issuer.\r\nThis does not create credential definition.",
        "operationId": "CreateSchema",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Schema parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/definitions/verifications/{definitionId}": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "summary": "[Deprecated] Get verification definition",
        "description": "Please use Verification Policies endpoints.\r\nGet the specified verification definition.",
        "operationId": "GetVerificationDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "definitionId",
            "in": "path",
            "description": "The verification definition identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationDefinitionContract"
            }
          }
        }
      }
    },
    "/definitions/verifications": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "summary": "[Deprecated] List all verification definitions",
        "description": "Please use Verification Policies endpoints.\r\nList all verification definitions for the authenticated organization.",
        "operationId": "ListVerificationDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VerificationDefinitionContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Definitions"
        ],
        "summary": "[Deprecated] Create verification definition",
        "description": "Please use Verification Policies endpoints.\r\nA verification definition is created and saved on your cloud agent.\r\nYou can discover your definition based on the ID that is returned or the name.",
        "operationId": "CreateVerificationDefinition",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The proof request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProofRequest"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationDefinitionContract"
            }
          }
        }
      }
    },
    "/definitions/verifications/{verificationDefinitionId}": {
      "delete": {
        "tags": [
          "Definitions"
        ],
        "summary": "[Deprecated] Delete verification definition",
        "description": "Please use Verification Policies endpoints.\r\nDelete the specified verification definition.",
        "operationId": "DeleteVerificationDefinition",
        "parameters": [
          {
            "name": "verificationDefinitionId",
            "in": "path",
            "description": "The verification definition identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "Messaging"
        ],
        "summary": "Send message",
        "description": "Send a message from the specified message parameters.",
        "operationId": "SendMessage",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The message parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BasicMessageParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/messages/connection/{connectionId}": {
      "get": {
        "tags": [
          "Messaging"
        ],
        "summary": "List all messages for connection",
        "description": "List all messages for the specified connection.",
        "operationId": "ListMessages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "The connection identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasicMessageRecord"
              }
            }
          }
        }
      }
    },
    "/messages/{messageId}": {
      "get": {
        "tags": [
          "Messaging"
        ],
        "summary": "Get message",
        "description": "Get the details for the specified message.",
        "operationId": "GetMessage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "The message identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasicMessageContract"
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "[Deprecated] List all tenants",
        "description": "Please use the Provider API instead.\r\nList all tenants for the current authorization context.",
        "operationId": "ListTenants",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "[Deprecated] Create tenant",
        "description": "Please use the Provider API instead.\r\nCreate a new tenant and setup a unique agency endpoint.\r\nThe agency will be set as an issuer.",
        "operationId": "CreateTenant",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Configuration options for creating new tenant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantContract"
            }
          }
        }
      }
    },
    "/tenants/{tenantId}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "[Deprectaed] Get tenant",
        "description": "Please use the Provider API instead.\r\nGet the configuration for the specified tenant.",
        "operationId": "GetTenant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "[Deprecated] Delete tenant",
        "description": "Please use the Provider API instead.\r\nPermanently remove the specified tenant, including their wallet, endpoint registrations and all data.\r\nAll definitions, connections and credentials issued will be deleted.\r\nThis action cannot be reverted.",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/tenants/issuerStatus": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "[Deprecated] Get issuer status for current tenant",
        "description": "Please use the Provider API instead.\r\nIf the tenant is configured with Dedicated endorsement, this action will check if the issuer DID has the required ENDORSER role on the configured ledger network.\r\nAdditionally, check the acceptance of the transaction author agreement and return the text and version if acceptance is required.",
        "operationId": "GetIssuerStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IssuerStatusContract"
            }
          }
        }
      }
    },
    "/verifications/policy/{policyId}/connections/{connectionId}": {
      "put": {
        "tags": [
          "Verifications"
        ],
        "summary": "Send verification to connection from policy",
        "description": "Send a verification to the specified connection using an existing policy.",
        "operationId": "SendVerificationFromPolicy",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "The connection identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "The policy identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationContract"
            }
          }
        }
      }
    },
    "/verifications/policy/connections/{connectionId}": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Send verification to connection from parameters",
        "description": "Send a verification request to the specified connection from a set of parameters.",
        "operationId": "SendVerificationFromParameters",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "The connection identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The policy parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationPolicyParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationContract"
            }
          }
        }
      }
    },
    "/verifications/proposal/{policyId}/connections/{connectionId}": {
      "put": {
        "tags": [
          "Verifications"
        ],
        "summary": "Send verification from policy",
        "description": "Create a verification from the specified policy and send it to the specified connection.",
        "operationId": "SendVerificationFromProposal",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "The connection identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "The verification policy identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationContract"
            }
          }
        }
      }
    },
    "/verifications/policy/{policyId}": {
      "put": {
        "tags": [
          "Verifications"
        ],
        "summary": "Create connectionless verification from policy",
        "description": "Create a connectionless verification from the specified policy.\r\nConnectionless transport uses URLs that can be shared with the user over any existing transport (email, SMS, web).",
        "operationId": "CreateVerificationFromPolicy",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "description": "The policy identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationContract"
            }
          }
        }
      }
    },
    "/verifications/policy": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Create connectionless verification from parameters",
        "description": "Create verification from parameters.\r\nConnectionless transport uses URLs that can be shared with the user over any existing transport (email, SMS, web).",
        "operationId": "CreateVerificationFromParameters",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The policy parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationPolicyParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationContract"
            }
          }
        }
      }
    },
    "/verifications": {
      "get": {
        "tags": [
          "Verifications"
        ],
        "summary": "List all verifications",
        "description": "List all verifications.\r\nOptionally filter by connection and/or definition.",
        "operationId": "ListVerifications",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "connectionId",
            "in": "query",
            "description": "The connection identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "definitionId",
            "in": "query",
            "description": "The definition identifier",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VerificationContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "[Deprecated] Create/send verification",
        "description": "Please use SendVerification(policyId) or CreateVerification(policyId) instead.\r\nThis endpoint can be used to send a verification definition to a connection, which will create a verification ID to track the response from the connection.\r\nIf the parameter {connectionId} is not specified, this endpoint will create a connectionless verification. A URL will be generated that can be shared with anonymous user.",
        "operationId": "CreateVerification",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The verification parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationContract"
            }
          }
        }
      }
    },
    "/verifications/{verificationId}": {
      "get": {
        "tags": [
          "Verifications"
        ],
        "summary": "Get verification",
        "description": "Get the specified verification.",
        "operationId": "GetVerification",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "verificationId",
            "in": "path",
            "description": "The verification identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Verifications"
        ],
        "summary": "Delete verification",
        "description": "Delete the specified verification.",
        "operationId": "DeleteVerification",
        "parameters": [
          {
            "name": "verificationId",
            "in": "path",
            "description": "The verification identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/verifications/{verificationId}/verify": {
      "get": {
        "tags": [
          "Verifications"
        ],
        "summary": "[Deprecated] Verify verification",
        "description": "This action is now obsolete. Verifications are automatically verified when they are received.\r\nExecute verification on this record. This is an expensive action and is executed by verifying the proof against the ledger data.",
        "operationId": "VerifyVerification",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "verificationId",
            "in": "path",
            "description": "The verification identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerificationResult"
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List all webhooks",
        "description": "List all webhooks registered with the authenticated organization.",
        "operationId": "ListWebhooks",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookContract"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create webhook",
        "description": "Register a webhook with the authenticated organization.",
        "operationId": "CreateWebhook",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The webhook parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookParameters"
            }
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WebhookContract"
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Remove webhook",
        "description": "Remove a registered webhook from the authenticated organization.",
        "operationId": "RemoveWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/webhooks/{webhookId}/enable": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Enable webhook",
        "description": "Enable a registered webhook for the authenticated organization.",
        "operationId": "EnableWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/webhooks/{webhookId}/disable": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Disable webhook",
        "description": "Enable a registered webhook for the authenticated organization.",
        "operationId": "DisableWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Health check",
        "description": "Check the health of the API.",
        "operationId": "Health",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "description": "Standard Authorization header using the Bearer scheme and an Access Token. Example: \"Bearer {Access Token}\"",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "NetworkContract": {
      "type": "object",
      "properties": {
        "networkId": {
          "type": "string"
        },
        "networkName": {
          "type": "string"
        },
        "genesisTransactions": {
          "type": "string"
        },
        "poolProtocolVersion": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NetworkTxnAgreementContract": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Acceptance agreement text"
        },
        "version": {
          "type": "string",
          "description": "Agreement version"
        },
        "acceptanceMethods": {
          "type": "object",
          "description": "List of agreement acceptance methods",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Transaction author agreement"
    },
    "ConnectionState": {
      "type": "string",
      "enum": [
        "Invited",
        "Negotiating",
        "Connected"
      ]
    },
    "AgentEndpoint": {
      "type": "object",
      "properties": {
        "did": {
          "type": "string",
          "readOnly": true
        },
        "verkey": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "uri": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ConnectionContract": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "myDid": {
          "type": "string"
        },
        "theirDid": {
          "type": "string"
        },
        "myKey": {
          "type": "string"
        },
        "theirKey": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/ConnectionState"
        },
        "invitation": {
          "type": "string"
        },
        "invitationUrl": {
          "type": "string"
        },
        "endpoint": {
          "$ref": "#/definitions/AgentEndpoint"
        },
        "createdAtUtc": {
          "type": "string",
          "format": "date-time"
        },
        "multiParty": {
          "type": "boolean"
        }
      }
    },
    "ConnectionInvitationParameters": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string",
          "description": "Unique connection identifier. If not specified, a random one will be generated."
        },
        "multiParty": {
          "type": "boolean",
          "description": "If set to 'true', the invitation can be used by multiple parties and will always have the status set to 'Invited'.\r\nWhen a party accepts this invitation, a new connection record with a unique identifier will be created.\r\nDefault value is 'false'."
        },
        "name": {
          "type": "string",
          "description": "Name that can be used as an alias for the connection.\r\nDefault value is 'null'."
        }
      },
      "description": "Connection invitation parameters"
    },
    "CredentialState": {
      "type": "string",
      "enum": [
        "Offered",
        "Requested",
        "Issued",
        "Rejected",
        "Revoked"
      ]
    },
    "CredentialContract": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/CredentialState"
        },
        "connectionId": {
          "type": "string"
        },
        "definitionId": {
          "type": "string"
        },
        "schemaId": {
          "type": "string"
        },
        "offerData": {
          "type": "string"
        },
        "offerUrl": {
          "type": "string"
        },
        "issuedAtUtc": {
          "type": "string",
          "format": "date-time"
        },
        "acceptedAtUtc": {
          "type": "string",
          "format": "date-time"
        },
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CredentialOfferParameters": {
      "type": "object",
      "required": [
        "definitionId"
      ],
      "properties": {
        "definitionId": {
          "type": "string",
          "description": "The credential definition identifier"
        },
        "connectionId": {
          "type": "string",
          "description": "Connection identifier to send this credential to.\r\nIf omitted, the request will be treated as connectionless issuance and will generate a URL."
        },
        "automaticIssuance": {
          "type": "boolean",
          "description": "If true, the credential will automatically be issued once the individual accepts the offer.\r\nIf false, when an individual accepts the offer the credential will be in state 'Requested' and must be manually issued.\r\nDefault value is 'false'."
        },
        "credentialValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Send offer."
    },
    "VerificationPolicyRestrictionAttribute": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        }
      }
    },
    "VerificationPolicyRestriction": {
      "type": "object",
      "properties": {
        "schemaId": {
          "type": "string"
        },
        "schemaIssuerDid": {
          "type": "string"
        },
        "schemaName": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string"
        },
        "issuerDid": {
          "type": "string"
        },
        "credentialDefinitionId": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/VerificationPolicyRestrictionAttribute"
        }
      }
    },
    "VerificationPolicyAttributeContract": {
      "type": "object",
      "required": [
        "attributeNames",
        "policyName"
      ],
      "properties": {
        "policyName": {
          "type": "string"
        },
        "attributeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerificationPolicyRestriction"
          }
        }
      }
    },
    "VerificationPolicyPredicateContract": {
      "type": "object",
      "required": [
        "attributeName",
        "policyName",
        "predicateType",
        "predicateValue"
      ],
      "properties": {
        "policyName": {
          "type": "string"
        },
        "attributeName": {
          "type": "string"
        },
        "predicateType": {
          "type": "string"
        },
        "predicateValue": {
          "type": "integer",
          "format": "int32"
        },
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerificationPolicyRestriction"
          }
        }
      }
    },
    "VerificationPolicyRevocationRequirement": {
      "type": "object",
      "properties": {
        "validAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "VerificationPolicyContract": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "policyId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerificationPolicyAttributeContract"
          }
        },
        "predicates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerificationPolicyPredicateContract"
          }
        },
        "revocationRequirement": {
          "$ref": "#/definitions/VerificationPolicyRevocationRequirement"
        }
      }
    },
    "VerificationPolicyParameters": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerificationPolicyAttributeContract"
          }
        },
        "predicates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerificationPolicyPredicateContract"
          }
        },
        "revocationRequirement": {
          "$ref": "#/definitions/VerificationPolicyRevocationRequirement"
        }
      }
    },
    "CredentialDefinitionContract": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supportsRevocation": {
          "type": "boolean"
        },
        "schemaId": {
          "type": "string"
        },
        "definitionId": {
          "type": "string"
        }
      }
    },
    "CredentialDefinitionFromSchemaParameters": {
      "type": "object",
      "required": [
        "attributes",
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Schema name"
        },
        "version": {
          "type": "string",
          "description": "Schema version"
        },
        "attributes": {
          "type": "array",
          "description": "Schema attribute names",
          "items": {
            "type": "string"
          }
        },
        "supportRevocation": {
          "type": "boolean",
          "description": "Support credential revocation"
        },
        "tag": {
          "type": "string",
          "description": "Unique tag to differentiate definitions of the same schema"
        }
      },
      "description": "Represents a request object to create new credential definition for an agency"
    },
    "CredentialDefinitionParameters": {
      "type": "object",
      "properties": {
        "supportRevocation": {
          "type": "boolean",
          "description": "Support credential revocation"
        },
        "tag": {
          "type": "string",
          "description": "Unique tag to differentiate definitions of the same schema"
        }
      },
      "description": "Credential definition parameters"
    },
    "SchemaParameters": {
      "type": "object",
      "required": [
        "attributeNames",
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The schema name"
        },
        "version": {
          "type": "string",
          "description": "The schema version"
        },
        "attributeNames": {
          "type": "array",
          "description": "The attribute names",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Schema."
    },
    "SchemaRecord": {
      "type": "object",
      "properties": {
        "typeName": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "attributeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "createdAtUtc": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAtUtc": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "AttributeValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AttributeFilter": {
      "type": "object",
      "properties": {
        "schemaId": {
          "type": "string"
        },
        "schemaIssuerDid": {
          "type": "string"
        },
        "schemaName": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string"
        },
        "issuerDid": {
          "type": "string"
        },
        "credentialDefinitionId": {
          "type": "string"
        },
        "attributeValue": {
          "$ref": "#/definitions/AttributeValue"
        }
      }
    },
    "RevocationInterval": {
      "type": "object",
      "properties": {
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "to": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProofAttributeInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeFilter"
          }
        },
        "nonRevoked": {
          "$ref": "#/definitions/RevocationInterval"
        }
      }
    },
    "ProofPredicateInfo": {
      "type": "object",
      "properties": {
        "predicateType": {
          "type": "string"
        },
        "predicateValue": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeFilter"
          }
        },
        "nonRevoked": {
          "$ref": "#/definitions/RevocationInterval"
        }
      }
    },
    "ProofRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "requestedAttributes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ProofAttributeInfo"
          }
        },
        "requestedPredicates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ProofPredicateInfo"
          }
        },
        "nonRevoked": {
          "$ref": "#/definitions/RevocationInterval"
        }
      }
    },
    "VerificationDefinitionContract": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The verification identifier"
        },
        "proofRequest": {
          "$ref": "#/definitions/ProofRequest"
        }
      },
      "description": ""
    },
    "BasicMessageParameters": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string",
          "description": "The connection identifier"
        },
        "text": {
          "type": "string",
          "description": "The message text"
        }
      },
      "description": "Basic message parameters"
    },
    "MessageDirection": {
      "type": "string",
      "enum": [
        "Incoming",
        "Outgoing"
      ]
    },
    "BasicMessageRecord": {
      "type": "object",
      "properties": {
        "typeName": {
          "type": "string",
          "readOnly": true
        },
        "connectionId": {
          "type": "string"
        },
        "sentTime": {
          "type": "string",
          "format": "date-time"
        },
        "direction": {
          "$ref": "#/definitions/MessageDirection"
        },
        "text": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "createdAtUtc": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAtUtc": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "BasicMessageContract": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string",
          "description": "The connection identifier"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The message timestamp"
        },
        "text": {
          "type": "string",
          "description": "The message text"
        },
        "direction": {
          "$ref": "#/definitions/MessageDirection"
        }
      },
      "description": "Basic message contract"
    },
    "EndorserType": {
      "type": "string",
      "enum": [
        "Shared",
        "Dedicated",
        "Delegated"
      ]
    },
    "TenantExtendedInformationContract": {
      "type": "object",
      "properties": {
        "issuerDid": {
          "type": "string",
          "description": "Issuer DID"
        },
        "issuerKey": {
          "type": "string",
          "description": "Issuer Public Key"
        },
        "issuerKeyGenerationSeed": {
          "type": "string",
          "description": "Issuer key generation seed used for deterministic key creation (32 characters)"
        },
        "agentDid": {
          "type": "string",
          "description": "Agent DID"
        },
        "agentKey": {
          "type": "string",
          "description": "Agent Public Key"
        },
        "agentKeyGenerationSeed": {
          "type": "string",
          "description": "Agent key generation seed used for deterministic key creation (32 characters)"
        },
        "agentServiceEndpoint": {
          "type": "string",
          "description": "Agent service endpoint URL"
        },
        "transactionEndorsement": {
          "$ref": "#/definitions/EndorserType"
        }
      },
      "description": "Extended tenant information"
    },
    "TenantContract": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The tenant name",
          "readOnly": true
        },
        "imageUrl": {
          "type": "string",
          "description": "The image URL"
        },
        "network": {
          "$ref": "#/definitions/NetworkContract"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant identifier",
          "readOnly": true
        },
        "extendedInformation": {
          "$ref": "#/definitions/TenantExtendedInformationContract"
        }
      },
      "description": "Tenant info"
    },
    "TenantParameters": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "issuerSeed": {
          "type": "string",
          "description": "Issuer seed used for deterministic DID generation.\r\nIf omitted, a random DID/Key is generated."
        },
        "name": {
          "type": "string",
          "description": "The tenant name"
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of tenant profile image"
        },
        "networkId": {
          "type": "string",
          "description": "Ledger network identifier.\r\nDefault is Sovrin Staging (sovrin-staging)."
        },
        "endorserType": {
          "$ref": "#/definitions/EndorserType"
        }
      },
      "description": "Configuration options for creating new tenant"
    },
    "IssuerStatusContract": {
      "type": "object",
      "properties": {
        "acceptanceText": {
          "type": "string",
          "description": "Transaction Author Agreement Text"
        },
        "acceptanceVersion": {
          "type": "string",
          "description": "Transaction Author Agreement version"
        },
        "acceptanceDigest": {
          "type": "string",
          "description": "The acceptance digest"
        },
        "acceptanceTime": {
          "type": "integer",
          "format": "int64",
          "description": "The acceptance time"
        },
        "requireAcceptance": {
          "type": "boolean",
          "description": "Indicates if user needs to accept the latest agreement on the network"
        },
        "transactionEndorsement": {
          "$ref": "#/definitions/EndorserType"
        },
        "issuerCanEndorse": {
          "type": "boolean",
          "description": "Indicates if the user has Endorser status"
        }
      },
      "description": "Issuer Status contract"
    },
    "ProofState": {
      "type": "string",
      "enum": [
        "Proposed",
        "Requested",
        "Accepted",
        "Rejected"
      ]
    },
    "ProofAttributeContract": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "revealed": {
          "type": "boolean",
          "readOnly": true
        },
        "selfAttested": {
          "type": "boolean"
        },
        "conditional": {
          "type": "boolean"
        }
      }
    },
    "ProposedAttribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "credentialDefinitionId": {
          "type": "string"
        },
        "schemaId": {
          "type": "string"
        },
        "issuerDid": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "referent": {
          "type": "string"
        }
      }
    },
    "ProposedPredicate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "credentialDefinitionId": {
          "type": "string"
        },
        "issuerDid": {
          "type": "string"
        },
        "schemaId": {
          "type": "string"
        },
        "predicate": {
          "type": "string"
        },
        "threshold": {
          "type": "integer",
          "format": "int32"
        },
        "referent": {
          "type": "string"
        }
      }
    },
    "ProofProposal": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "proposedAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProposedAttribute"
          }
        },
        "proposedPredicates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProposedPredicate"
          }
        }
      }
    },
    "VerificationContract": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string"
        },
        "verificationId": {
          "type": "string"
        },
        "definitionId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/ProofState"
        },
        "createdAtUtc": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAtUtc": {
          "type": "string",
          "format": "date-time"
        },
        "isValid": {
          "type": "boolean"
        },
        "verifiedAtUtc": {
          "type": "string",
          "format": "date-time"
        },
        "proof": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ProofAttributeContract"
          }
        },
        "policy": {
          "$ref": "#/definitions/VerificationPolicyParameters"
        },
        "proposal": {
          "$ref": "#/definitions/ProofProposal"
        },
        "verificationRequestData": {
          "type": "string"
        },
        "verificationRequestUrl": {
          "type": "string"
        }
      }
    },
    "VerificationParameters": {
      "type": "object",
      "required": [
        "verificationDefinitionId"
      ],
      "properties": {
        "verificationDefinitionId": {
          "type": "string",
          "description": "Verification definition identifier"
        },
        "connectionId": {
          "type": "string",
          "description": "Connection identifier"
        }
      },
      "description": "Create verification"
    },
    "VerificationResult": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "description": "True if verification passed, otherwise False"
        },
        "proof": {
          "type": "object",
          "description": "Verification Proof Details",
          "additionalProperties": {
            "$ref": "#/definitions/ProofAttributeContract"
          }
        }
      },
      "description": "Verification result"
    },
    "WebhookType": {
      "type": "string",
      "enum": [
        "Notification",
        "DelegatedEndorser",
        "Zapier"
      ]
    },
    "WebhookContract": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/WebhookType"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "WebhookParameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/WebhookType"
        },
        "parameters": {
          "type": "string"
        }
      }
    }
  }
}