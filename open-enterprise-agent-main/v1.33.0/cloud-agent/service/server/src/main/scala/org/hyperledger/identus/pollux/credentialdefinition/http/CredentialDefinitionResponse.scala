package org.hyperledger.identus.pollux.credentialdefinition.http

import org.hyperledger.identus.api.http.*
import org.hyperledger.identus.pollux.core.model
import org.hyperledger.identus.pollux.core.model.schema.CredentialDefinition
import org.hyperledger.identus.pollux.credentialdefinition.http.CredentialDefinitionResponse.annotations
import sttp.model.Uri
import sttp.model.Uri.*
import sttp.tapir.Schema
import sttp.tapir.Schema.annotations.default
import sttp.tapir.Schema.annotations.description
import sttp.tapir.Schema.annotations.encodedExample
import sttp.tapir.Schema.annotations.encodedName
import sttp.tapir.json.zio.schemaForZioJsonValue
import zio.json.*
import zio.json.ast.Json

import java.time.OffsetDateTime
import java.util.UUID

case class CredentialDefinitionResponse(
    @description(annotations.guid.description)
    @encodedExample(annotations.guid.example)
    guid: UUID,
    @description(annotations.id.description)
    @encodedExample(annotations.id.example)
    id: String,
    @description(annotations.longId.description)
    @encodedExample(annotations.longId.example)
    longId: Option[String],
    @description(annotations.name.description)
    @encodedExample(annotations.name.example)
    name: String,
    @description(annotations.version.description)
    @encodedExample(annotations.version.example)
    version: String,
    @description(annotations.tag.description)
    @encodedExample(annotations.tag.example)
    tag: String,
    @description(annotations.description.description)
    @encodedExample(annotations.description.example)
    description: String,
    @description(annotations.author.description)
    @encodedExample(annotations.author.example)
    author: String,
    @description(annotations.authored.description)
    @encodedExample(annotations.authored.example)
    authored: OffsetDateTime,
    @description(annotations.schemaId.description)
    @encodedExample(annotations.schemaId.example)
    schemaId: String,
    @description(annotations.definition.description)
    @encodedExample(annotations.definition.example.toJson)
    definition: zio.json.ast.Json,
    @description(annotations.keyCorrectnessProof.description)
    @encodedExample(annotations.keyCorrectnessProof.example.toJson)
    keyCorrectnessProof: zio.json.ast.Json,
    @description(annotations.signatureType.description)
    @encodedExample(annotations.signatureType.example)
    signatureType: String,
    @description(annotations.supportRevocation.description)
    @encodedExample(annotations.supportRevocation.example)
    supportRevocation: Boolean,
    @description(annotations.proof.description)
    @encodedExample(annotations.proof.example.toJson)
    proof: Option[Proof],
    @description(annotations.kind.description)
    @encodedExample(annotations.kind.example)
    kind: String = "CredentialDefinition",
    @description(annotations.self.description)
    @encodedExample(annotations.self.example)
    self: String = ""
) {
  def withBaseUri(base: Uri) = withSelf(base.addPath(guid.toString).toString)

  def withSelf(self: String) = copy(self = self)
}

object CredentialDefinitionResponse {

  def fromDomain(cd: CredentialDefinition): CredentialDefinitionResponse =
    CredentialDefinitionResponse(
      guid = cd.guid,
      id = cd.id.toString,
      longId = Option(cd.longId),
      name = cd.name,
      version = cd.version,
      tag = cd.tag,
      description = cd.description,
      author = cd.author,
      authored = cd.authored,
      schemaId = cd.schemaId,
      definition = cd.definition,
      keyCorrectnessProof = cd.keyCorrectnessProof,
      signatureType = cd.signatureType,
      supportRevocation = cd.supportRevocation,
      proof = None
    )

  given scala.Conversion[CredentialDefinition, CredentialDefinitionResponse] = fromDomain

  given encoder: zio.json.JsonEncoder[CredentialDefinitionResponse] =
    DeriveJsonEncoder.gen[CredentialDefinitionResponse]

  given decoder: zio.json.JsonDecoder[CredentialDefinitionResponse] =
    DeriveJsonDecoder.gen[CredentialDefinitionResponse]

  given schema: Schema[CredentialDefinitionResponse] = Schema.derived

  object annotations {
    object guid
        extends Annotation[UUID](
          description = "Globally unique id of the credential definition." +
            "It's composed from the bytes of the string that contain the `author`, `name`, and `version` values." +
            "The string format looks like the resource identifier: " +
            "`author`/`id`?version=`version`",
          example = UUID.fromString("0527aea1-d131-3948-a34d-03af39aba8b4")
        )

    object id
        extends Annotation[UUID](
          description =
            "A locally unique identifier to address the credential definition. UUID is generated by the backend.",
          example = UUID.fromString("0527aea1-d131-3948-a34d-03af39aba8b5")
        )

    object longId
        extends Annotation[String](
          description =
            "Resource id of the credential definition. Contains the `author`'s DID, `id` and `version` fields.",
          example = "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff" +
            "/0527aea1-d131-3948-a34d-03af39aba8b4?version=1.0.0"
        )

    object self
        extends Annotation[String](
          description = "The URL that uniquely identifies the resource being returned in the response.",
          example = "/cloud-agent/credential-definition-registry/schemas/0527aea1-d131-3948-a34d-03af39aba8b4"
        )

    object kind
        extends Annotation[String](
          description = "A string that identifies the type of resource being returned in the response.",
          example = "CredentialDefinition"
        )

    object proof
        extends Annotation[Proof](
          description = "A digital signature over the Credential Definition for the sake of asserting authorship. " +
            "A piece of Metadata.",
          example = Proof.Example
        )

    object name
        extends Annotation[String](
          description = "A human-readable name for the credential definition. A piece of Metadata.",
          example = "DrivingLicense"
        )

    object version
        extends Annotation[String](
          description = "Denotes the revision of a given Credential Definition. " +
            "It should follow semantic version convention to describe the impact of the credential definition evolution.",
          example = "1.0.0"
        )

    object tag
        extends Annotation[String](
          description = "Token that allow to lookup and filter the credential definition records.",
          example = "licence"
        )

    object description
        extends Annotation[String](
          description = "A human-readable description of the credential definition",
          example = "Simple credential definition for the driving licence verifiable credential."
        )

    object author
        extends Annotation[String](
          description = "DID of the identity which authored the credential definition. " +
            "A piece of Metadata.",
          example = "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff"
        )

    object schemaId
        extends Annotation[Option[String]](
          description = "The unique identifier of the schema used for this credential definition.",
          example =
            Some("https://agent-host.com/cloud-agent/schema-registry/schemas/d9569cec-c81e-4779-aa86-0d5994d82676")
        )

    object authored
        extends Annotation[OffsetDateTime](
          description =
            "[RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential definition was created. " +
              "A piece of Metadata.",
          example = OffsetDateTime.parse("2022-03-10T12:00:00Z")
        )

    object definition
        extends Annotation[Json](
          description = "Definition object that represents the actual definition of the credential.",
          example = definitionExampleString.fromJson[Json].toOption.getOrElse(Json.Null)
        )

    object keyCorrectnessProof
        extends Annotation[Json](
          description =
            "A proof that validates the correctness of the key within the context of the credential definition.",
          example = keyCorrectnessProofExampleString.fromJson[Json].toOption.getOrElse(Json.Null)
        )

    object signatureType
        extends Annotation[String](
          description = "Signature type used in the CredentialDefinition.",
          example = "CL"
        )

    object supportRevocation
        extends Annotation[Boolean](
          description = "Boolean flag indicating whether revocation is supported for this CredentialDefinition.",
          example = false
        )

    val definitionExampleString =
      """
        |{
        |   "credentialSubject": {
        |     "emailAddress": "alice@wonderland.com",
        |     "givenName": "Alice",
        |     "familyName": "Wonderland",
        |     "dateOfIssuance": "2000-01-01T10:00:00Z",
        |     "drivingLicenseID": "12345",
        |     "drivingClass": 5
        |   }
        |}
        |""".stripMargin

    val keyCorrectnessProofExampleString =
      """
        |{
        |{
        |  "c": "5554...7318",
        |  "xz_cap": "6705...0199",
        |  "xr_cap": [
        |    [
        |      "dateofissuance",
        |      "6038...0939"
        |    ],
        |    [
        |      "drivingclass",
        |      "8038...0939"
        |    ],
        |    [
        |      "familyname",
        |      "3038...0939"
        |    ],
        |    [
        |      "drivinglicenseid",
        |      "9038...0939"
        |    ],
        |    [
        |      "emailaddress",
        |      "4038...0939"
        |    ],
        |    [
        |      "master_secret",
        |      "3058...0939"
        |    ]
        |  ]
        |}
        |""".stripMargin
  }
}
