@startuml
title Present Proof flow - AnonCreds

participant "Verifiable\nData Registry" as L
actor Prover as prover
participant "Prover Cloud Agent" as proverAgent
participant "Verifier Cloud Agent" as verifierAgent
actor Verifier as verifier

note over proverAgent, verifierAgent #aqua
    It is assumed that a connection already exists between the prover and the verifier, and that the prover already owns a credential.
    It is also assumed that AnonCreds related setup is completed (credential definition object published and holder has link secret generated).
end note
|||

note over verifier: Verifiers are aware of schemas and credential definitions they want to verify. \n(and can either cache it or fetch from the VDR as needed)
== Create and send proof presentation request ==
|||
verifier -> verifierAgent: Create new proof presentation request\n""POST /present-proof/presentations""\n""{connectionId, <s:red>challenge, domain</s> \n<color:green>requested_attributes, requested_predicates, non_revoked</color>}""
note right: Request inputs are part of the business/app logic. \nIt should probably come from the Verification Policy.\n\nThere is a rich set of **restrictions** which could be \nattached to the requested attributes and predicates!

verifierAgent -> verifierAgent: Create proof presentation state record
verifierAgent --> verifier: Proof presentation record {id, state}
note over verifierAgent: state=RequestPending
|||

== Send proof presentation request over DIDComm ==
|||
verifierAgent -> proverAgent: ""PresentationRequest"" message (includes domain/challenge)
proverAgent -> proverAgent: Create proof presentation state record
proverAgent --> verifierAgent: OK
note over proverAgent: state=RequestReceived
/ note over verifierAgent: state=RequestSent
|||

== Review proof presentation request, select credentials and accept it ==
|||
prover -> proverAgent: Retrieve presentation requests\n""GET /present-proof/presentations""
proverAgent --> prover: request list
prover -> prover: Review presentation request
prover -> proverAgent: Retrieve available credentials \n(either all or filtered)
proverAgent --> prover: credential list
prover -> prover: Select credentials to satisfy the request
prover -> prover: If needed: Provide self-attested attributes
|||

prover -> proverAgent: Accept presentation request\n""POST /present-proof/presentations/{id}""\n{proofId=xxx, action=request-accept, <color:green>credential_ids, self-attested data</color>}
note right #pink: Here the prover specifies the credential records\nto use to generate the proof presentation, and also, \nspecify which attributes are revealed and which are not.
proverAgent --> prover: OK
note over proverAgent: state=PresentationPending
|||

== Generate and send proof presentation ==
|||
proverAgent [#red]-> proverAgent: <s:red>Sign the domain challenge with the Prism DID subject of the credential</s>

group Optional
proverAgent [#green]-> L: Retrieve the revocation entries
L [#green]--> proverAgent: Revocation entries
proverAgent [#green]-> proverAgent: Generate non-revocation proof
end
proverAgent [#green]-> L: Retrieve relevant Schemas and CredDefs
L [#green]--> proverAgent: Schemas and CredDefs

proverAgent -> proverAgent: Create presentation
note right: Inputs: \ncredential IDs with attribute names to reveal \nnon-revocation proofs \nself-attested data \nlink_secret \nschemas and credential definitions
note over proverAgent: state=PresentationGenerated
|||
proverAgent -> verifierAgent: ""Presentation"" message (with credential ownership proof)
verifierAgent --> proverAgent: OK
note over proverAgent: state=PresentationSent
/ note over verifierAgent: state=PresentationReceived
|||
verifierAgent -> verifierAgent: Verify proof presentation
note right: If proof contains NRPs, verifier would need \nto fetch revocation entries from the VDR!
note over verifierAgent: state=PresentationVerified
|||

== Accept verified proof presentation ==
|||
verifier -> verifier: Business logic layer validation
verifier -> verifierAgent: Accept proof presentation\n""PATCH /present-proof/presentations/{id}""\n""{action=presentation-accept}""
note over verifierAgent: state=PresentationAccepted

@enduml
