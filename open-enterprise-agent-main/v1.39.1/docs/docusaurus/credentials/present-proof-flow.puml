@startuml
title Present Proof flow

actor Prover as prover
participant "Prover Cloud Agent" as proverAgent
participant "Verifier Cloud Agent" as verifierAgent
actor Verifier as verifier

note over proverAgent, verifierAgent #aqua
    It is assumed that a connection already exists between the prover and the verifier, and that the prover already owns a credential.
end note
|||

== Create and send proof presentation request ==
|||
verifier -> verifierAgent: Create new proof presentation request\n""POST /present-proof/presentations""\n""{connectionId, challenge, domain}""
verifierAgent -> verifierAgent: Create proof presentation state record
verifierAgent --> verifier: Proof presentation record {id, state}
note over verifierAgent: state=RequestPending
|||

== Send proof presentation request over DIDComm ==
|||
verifierAgent -> proverAgent: ""PresentationRequest"" message (includes domain/challenge)
proverAgent -> proverAgent: Create proof presentation state record
proverAgent --> verifierAgent: OK
note over proverAgent: state=RequestReceived
/ note over verifierAgent: state=RequestSent
|||

== Review and accept proof presentation request ==
|||
prover -> proverAgent: Retrieve presentation requests\n""GET /present-proof/presentations""
proverAgent --> prover: request list
|||
prover -> proverAgent: Accept presentation request\n""POST /present-proof/presentations/{id}""\n{proofId=xxx, action=request-accept}
note right #pink: Here the prover specifies the credential record\nto use to generate the proof presentation
proverAgent --> prover: OK
note over proverAgent: state=PresentationPending
|||

== Generate and send proof presentation ==
|||
proverAgent -> proverAgent: Sign the domain/challenge received from\nthe verifier with the Prism DID\nsubject of the credential
proverAgent -> proverAgent: Create presentation
note over proverAgent: state=PresentationGenerated
|||
proverAgent -> verifierAgent: ""Presentation"" message (with credential ownership proof)
verifierAgent --> proverAgent: OK
note over proverAgent: state=PresentationSent
/ note over verifierAgent: state=PresentationReceived
|||
verifierAgent -> verifierAgent: Verify proof presentation
note over verifierAgent: state=PresentationVerified
|||

== Accept verified proof presentation ==
|||
verifier -> verifierAgent: Accept proof presentation\n""PATCH /present-proof/presentations/{id}""\n""{action=presentation-accept}""
note over verifierAgent: state=PresentationAccepted

@enduml
