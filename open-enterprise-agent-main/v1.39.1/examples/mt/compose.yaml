configs:
  caddyfile_default:
    content: |-
      :8080 {
        handle_path /didcomm* {
          reverse_proxy agent-default:8090
        }
        handle_path /cloud-agent* {
          reverse_proxy agent-default:8085
        }
        handle_path /keycloak* {
          reverse_proxy keycloak-default:8080
        }
        handle_path /vault* {
          reverse_proxy vault-default:8200
        }
      }
services:
  agent-default:
    depends_on:
      node:
        condition: service_started
    environment:
      ADMIN_TOKEN: admin
      AGENT_DB_HOST: db-default
      AGENT_DB_NAME: agent
      AGENT_DB_PASSWORD: postgres
      AGENT_DB_PORT: '5432'
      AGENT_DB_USER: postgres
      API_KEY_ENABLED: 'true'
      CONNECT_DB_HOST: db-default
      CONNECT_DB_NAME: connect
      CONNECT_DB_PASSWORD: postgres
      CONNECT_DB_PORT: '5432'
      CONNECT_DB_USER: postgres
      DIDCOMM_SERVICE_URL: http://caddy-default:8080/didcomm
      POLLUX_DB_HOST: db-default
      POLLUX_DB_NAME: pollux
      POLLUX_DB_PASSWORD: postgres
      POLLUX_DB_PORT: '5432'
      POLLUX_DB_USER: postgres
      POLLUX_STATUS_LIST_REGISTRY_PUBLIC_URL: http://caddy-default:8080/cloud-agent
      PRISM_NODE_HOST: node
      PRISM_NODE_PORT: '50053'
      REST_SERVICE_URL: http://caddy-default:8080/cloud-agent
      SECRET_STORAGE_BACKEND: postgres
    image: ghcr.io/hyperledger/identus-cloud-agent:1.38.0
    restart: always
  caddy-default:
    configs:
    - source: caddyfile_default
      target: /etc/caddy/Caddyfile
    image: caddy:2.7.6-alpine
    ports:
    - 8080:8080
    restart: always
  db-default:
    environment:
      POSTGRES_MULTIPLE_DATABASES: pollux,connect,agent
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - postgres
      - -d
      - postgres
      timeout: 5s
    image: postgres:13
    restart: always
    volumes:
    - pg_data_default:/var/lib/postgresql/data
    - ../.shared/postgres/init-script.sh:/docker-entrypoint-initdb.d/init-script.sh
    - ../.shared/postgres/max_conns.sql:/docker-entrypoint-initdb.d/max_conns.sql
  node:
    depends_on:
      node-db:
        condition: service_healthy
    environment:
      NODE_PSQL_DATABASE: node_db
      NODE_PSQL_HOST: node-db:5432
      NODE_PSQL_PASSWORD: postgres
      NODE_PSQL_USERNAME: postgres
    image: ghcr.io/input-output-hk/prism-node:2.4.0
    restart: always
  node-db:
    environment:
      POSTGRES_MULTIPLE_DATABASES: node_db
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - postgres
      - -d
      - postgres
      timeout: 5s
    image: postgres:13
    restart: always
    volumes:
    - pg_data_node:/var/lib/postgresql/data
    - ../.shared/postgres/init-script.sh:/docker-entrypoint-initdb.d/init-script.sh
    - ../.shared/postgres/max_conns.sql:/docker-entrypoint-initdb.d/max_conns.sql
volumes:
  pg_data_default: {}
  pg_data_node: {}
