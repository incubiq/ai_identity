apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-bootstrap-script
  labels:
    {{- include "labels.common" . | nindent 4 }}
data:
  init.ts: |
    const KEYCLOAK_BASE_URL = process.env.KEYCLOAK_BASE_URL!;
    const KEYCLOAK_ADMIN_USER = process.env.KEYCLOAK_ADMIN_USER!;
    const KEYCLOAK_ADMIN_PASSWORD = process.env.KEYCLOAK_ADMIN_PASSWORD!;
    const REALM_NAME = process.env.REALM_NAME!;
    const CLOUD_AGENT_CLIENT_ID = process.env.CLOUD_AGENT_CLIENT_ID!;
    const CLOUD_AGENT_CLIENT_SECRET = process.env.CLOUD_AGENT_CLIENT_SECRET!;

    async function getAdminToken(): Promise<string> {
      const req = new Request(`${KEYCLOAK_BASE_URL}/realms/master/protocol/openid-connect/token`, {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({
          "grant_type": "password",
          "client_id": "admin-cli",
          "username": KEYCLOAK_ADMIN_USER,
          "password": KEYCLOAK_ADMIN_PASSWORD,
        })
      });
      const resp = await fetch(req);
      const body = await resp.json();
      if (resp.status !== 200) {
        throw new Error("Response did not return success status code." +
          ` Status: ${resp.status}, Body: ${JSON.stringify(body)}`
        );
      }
      return body["access_token"];
    }

    async function createRealm(accessToken: string) {
      console.log(`Creating realm ${REALM_NAME} ...`);
      const req = new Request(`${KEYCLOAK_BASE_URL}/admin/realms`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`
        },
        body: JSON.stringify({
          "realm": REALM_NAME,
          "enabled": true,
        })
      });
      const resp = await fetch(req);
      const resp_body = await resp.json();
      switch (resp.status) {
        case 201:
          console.log(`Realm ${REALM_NAME} created.`);
          break;
        case 409:
          console.log(`Realm ${REALM_NAME} already exists.`);
          break;
        default:
          throw new Error("Response did not return success status code." +
            ` Status: ${resp.status}, Body: ${JSON.stringify(resp_body)}`
          );
      }
    }

    async function createClient(accessToken: string, clientId: string, clientSecret?: string) {
      console.log(`Creating client ${clientId} ...`);
      let req_body = {};
      if (clientSecret) {
        req_body = {
          "id": clientId,
          "directAccessGrantsEnabled": true,
          "authorizationServicesEnabled": true,
          "serviceAccountsEnabled": true,
          "secret": clientSecret
        };
      } else {
        // public client is created if client secret is not provided
        req_body = {
          "id": clientId,
          "publicClient": true,
          "consentRequired": true,
          "redirectUris": ["*"]
        };
      }

      const req = new Request(`${KEYCLOAK_BASE_URL}/admin/realms/${REALM_NAME}/clients`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`
        },
        body: JSON.stringify(req_body)
      });
      const resp = await fetch(req);
      const resp_body = await resp.json();
      switch (resp.status) {
        case 201:
          console.log(`Client ${clientId} created.`);
          break;
        case 409:
          console.log(`Client ${clientId} already exists.`);
          break;
        default:
          throw new Error("Response did not return success status code." +
            ` Status: ${resp.status}, Body: ${JSON.stringify(resp_body)}`
          );
      }
    }
    (async () => {
      console.log("Getting admin access token ...");
      const adminToken = await getAdminToken();
      await createRealm(adminToken);
      await createClient(adminToken, CLOUD_AGENT_CLIENT_ID, CLOUD_AGENT_CLIENT_SECRET);
    })();
